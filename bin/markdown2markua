#!/usr/bin/perl 
#
#         FILE: markdown2markua.pl
#
#        USAGE: ./markdown2markua.pl < file.markdown > file.markua
#
#  DESCRIPTION: convert markdown text to markua
#
#       AUTHOR: Mathias Weidner

use strict;
use warnings;

package Markdown::Markua;

use version; our $VERSION = qv('0.0.1');

sub new {
	my ($self) = @_;
	my $type = ref($self) || $self;

	$self = bless {
			last_code_block => '',
			last_par	=> '',
			last_ul_item	=> '',
			state_table	=> {
				'START'				=> sub { $self->_start(@_) },
				0     => sub { $self->_empty_line(@_) },
				1     => sub { $self->_paragraph(@_) },
				'START_LIST_ITEM'	=> sub { $self->_start_list_item(@_) },
				'AFTER_LIST_ITEM'	=> sub { $self->_after_list_item(@_) },
				'START_LIST_ITEM2'	=> sub { $self->_start_list_item2(@_) },
				'AFTER_LIST_ITEM2'	=> sub { $self->_after_list_item2(@_) },
				4     => sub { $self->_indented_code_block(@_) },
				5     => sub { $self->_empty_line_after_indented_code(@_) },
			},
			state		=> 'START',
		}, $type;
	return $self;
}

sub _start {
	my ($self,$line) = @_;

	if ($line =~ /^-# (.+)$/) {
		$self->printout("# $1 #");
		return 0;
	}
	if ($line =~ /^[-*+](\s{1,4}|\t)(\S.*)$/) {
		$self->{last_ul_item} = "* $2";
		return 'START_LIST_ITEM';
	}
	if ($line =~ /^ {4}(.+)$/) {
		$self->{last_code_block} = "$1\n";
		return 4;
	}
	if ($line !~ /^\s*$/) {
		$self->{last_par} = $line;
		return 1;
	}
	return 'START';
} # _start()

sub _empty_line{			# empty line
	my ($self,$line) = @_;

	if ($line =~ /^-# (.+)$/) {
		$self->printout("# $1 #");
		return 0;
	}
	if ($line =~ /^[-*+](\s{1,4}|\t)(\S.*)$/) {
		$self->{last_ul_item} = "* $2";
		return 'START_LIST_ITEM';
	}
	if ($line =~ /^ {4}(.+)$/) {
		$self->{last_code_block} = "$1\n";
		return 4;
	}
	if ($line !~ /^\s*$/) {
		$self->{last_par} = $line;
		return 1;
	}
	$self->printout($line);
	return 0;
} # _empty_line()

sub _paragraph {			# paragraph
	my ($self,$line) = @_;

	if ($line =~ /^\s*$/) {
		$self->printout("$self->{last_par}\n");
		$self->{last_par} = "";
		return 0;
	}
	$self->{last_par} .= " $line";
	return 1;
} # _paragraph()

sub _start_list_item {			# start list item
	my ($self,$line) = @_;

	if ($line =~ /^\s*$/) {
		$self->printout("$self->{last_ul_item}");
		$self->printout();
		$self->{last_ul_item} = "";
		return 'AFTER_LIST_ITEM';
	}
	if ($line =~ /^ {4}[-*+](\s{1,4}|\t)(.*)$/) {
		$self->printout("$self->{last_ul_item}");
		$self->{last_ul_item2} = "    * $2";
		return 'START_LIST_ITEM2';
	}
	if ($line =~ /^[-*+](\s{1,4}|\t)(.*)$/) {
		$self->printout("$self->{last_ul_item}");
		$self->{last_ul_item} = "* $2";
		return 'START_LIST_ITEM';
	}
	if ($line =~ /^ {4}(.+)$/) {
		$self->{last_ul_item} .= ($self->{last_ul_item} ? " $1" : $1);
		return 'START_LIST_ITEM';
	}
	$self->{last_ul_item} .= " $line";
	return 'START_LIST_ITEM';
} # _start_list_item()

sub _after_list_item {			# after list item
	my ($self,$line) = @_;

	if ($line =~ /^ {4}[-*+](\s{1,4}|\t)(\S.*)$/) {
		$self->{last_ul_item2} = "    * $2";
		return 'START_LIST_ITEM2';
	}
	if ($line =~ /^[-*+](\s{1,4}|\t)(\S.*)$/) {
		$self->{last_ul_item} = "* $2";
		return 'START_LIST_ITEM';
	}
	if ($line =~ /^ {4}(.+)$/) {
		$self->{last_ul_item} .= ($self->{last_ul_item} ? " $1" : $1);
		return 'AFTER_LIST_ITEM';
	}
	if ($line !~ /^\s*$/) {
		if ($self->{last_ul_item}) {
			$self->printout("    $self->{last_ul_item}");
		}
		$self->{last_par} = "$line";
		$self->{last_ul_item} = "";
		return 1;
	}
	$self->printout("    $self->{last_ul_item}");
	$self->printout();
	$self->{last_ul_item} = "";
	return 'AFTER_LIST_ITEM';
} # _after_list_item

sub _start_list_item2 {			# start list item
	my ($self,$line) = @_;

	if ($line =~ /^\s*$/) {
		$self->printout("$self->{last_ul_item2}");
		$self->printout();
		$self->{last_ul_item2} = "";
		return 'AFTER_LIST_ITEM2';
	}
	if ($line =~ /^[-*+](\s{1,4}|\t)(.*)$/) {
		$self->printout("$self->{last_ul_item2}");
		$self->{last_ul_item} = "* $2";
		return 'START_LIST_ITEM';
	}
	if ($line =~ /^ {4}[-*+](\s{1,4}|\t)(.*)$/) {
		$self->printout("$self->{last_ul_item2}");
		$self->{last_ul_item2} = "    * $2";
		return 'START_LIST_ITEM2';
	}
	if ($line =~ /^ {8}(.+)$/) {
		$self->{last_ul_item2} .= "$1 ";
		return 'START_LIST_ITEM2';
	}
#	$self->{last_ul_item2} .= " $line";
	return 'START_LIST_ITEM2';
} # _start_list_item2()

sub _after_list_item2 {			# after list item
	my ($self,$line) = @_;

	if ($line =~ /^ {4}[-*+](\s{1,4}|\t)(\S.*)$/) {
		$self->{last_ul_item2} = "    * $2";
		return 'START_LIST_ITEM2';
	}
	if ($line =~ /^[-*+](\s{1,4}|\t)(\S.*)$/) {
		$self->{last_ul_item} = "* $2";
		return 'START_LIST_ITEM';
	}
	if ($line =~ /^ {8}(.+)$/) {
		$self->{last_ul_item2} .= "$1 ";
		return 'AFTER_LIST_ITEM2';
	}
	if ($line =~ /^ {4}(.+)$/) {
		$self->{last_ul_item} .= "$1 ";
		return 'AFTER_LIST_ITEM';
	}
	if ($line !~ /^\s*$/) {
		if ($self->{last_ul_item2}) {
			$self->printout("        $self->{last_ul_item2}");
		}
		$self->{last_par} = "$line";
		$self->{last_ul_item2} = "";
		return 1;
	}
	$self->printout("        $self->{last_ul_item2}");
	$self->printout();
	$self->{last_ul_item2} = "";
	return 'AFTER_LIST_ITEM2';
} # _after_list_item2()

sub _indented_code_block {			# indented code block
	my ($self,$line) = @_;

	if ($line =~ /^ {4}(.+)$/) {
		$self->{last_code_block} .= "$1\n";
		return 4;
	}
	if ($line =~ /^\t(.+)$/) {
		$self->{last_code_block} .= "    $1\n";
		return 4;
	}
	if ($line =~ /^\s*$/) {
		return 5;
	}
} # _indented_code_block()

sub _empty_line_after_indented_code {			# empty line after indented code
	my ($self,$line) = @_;

	if ($line =~ /^[*-+](\s{1,4}|\t)(\S.*)$/) {
		$self->printout("```\n$self->{last_code_block}```\n");
		$self->{last_code_block} = "";
		$self->{last_ul_item} = "* $2";
		return 'START_LIST_ITEM';
	}
	if ($line =~ /^ {4}(.+)$/) {
		$self->{last_code_block} .= "\n$1\n";
		return 4;
	}
	if ($line !~ /^\s*$/) {
		$self->printout("```\n$self->{last_code_block}```\n");
		$self->{last_code_block} = "";
		$self->{last_par} = $line;
		return 1;
	}
	$self->{last_code_block} .= "\n";
	return 5;
} # _empty_line_after_indented_code()

sub printout {
	my $self = shift;
	my $out  = $self->{out};
	print $out @_, "\n";
} # printout()

sub process {
	my ($self,$line) = @_;
	$self->{state} = $self->{state_table}->{$self->{state}}->($line);
} # process()

sub convert {
	my ($self,$in,$out) = @_;

	$self->{out} = $out;
	while (my $line = <$in>) {
		chomp $line;
		$self->process($line);
	}
	if ($self->{last_par}) {
		$self->printout($self->{last_par});
	}
} # convert()

package main;

my $m2m = Markdown::Markua->new();

$m2m->convert(*STDIN,*STDOUT);

